export declare enum Interval {
    UNISON = 0,
    MINOR_SECOND = 1,
    MAJOR_SECOND = 2,
    MINOR_THIRD = 3,
    MAJOR_THIRD = 4,
    PERFECT_FOURTH = 5,
    TRITONE = 6,
    PERFECT_FIFTH = 7,
    MINOR_SIXTH = 8,
    MAJOR_SIXTH = 9,
    MINOR_SEVENTH = 10,
    MAJOR_SEVENTH = 11
}
export declare enum Pitch {
    C = 0,
    Cs = 1,
    D = 2,
    Ds = 3,
    E = 4,
    F = 5,
    Fs = 6,
    G = 7,
    Gs = 8,
    A = 9,
    As = 10,
    B = 11
}
export declare type Octave = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
export declare class Note {
    private _pitch;
    private _octave;
    constructor(pitch: Pitch, octave: Octave);
    get pitch(): Pitch;
    get octave(): Octave;
    equals(other: Note): boolean;
    toString(): string;
    getSemitoneValue(): number;
    compare(other: Note): -1 | 0 | 1;
    getInterval(relativeNote: Note): Interval;
}
export declare const createNoteFromName: (noteName: string) => Note;
export declare class Chord {
    private _root;
    private _bass;
    private _intervals;
    private _name;
    private _prob;
    constructor(root: Note, bass: Note, intervals?: Set<Interval>);
    get prob(): number;
    toString(): string;
    addNewInterval(interval: Interval): void;
    sortNoteNames: (first: string, second: string) => -1 | 1;
    fillExtensionNotes(remainingNotes: Map<number, Array<string>>): void;
    handleExtensionNotes(isMajorChord: boolean, isPowerChord?: boolean, isDiminished?: boolean): void;
    handleSuspendedNotes(): void;
    handleTriad(): void;
    handleSusOrPowerChord(): void;
    handleDyad(): void;
    handleDiminished(): void;
    handleAugmented(): void;
    determineChordName(): void;
}
