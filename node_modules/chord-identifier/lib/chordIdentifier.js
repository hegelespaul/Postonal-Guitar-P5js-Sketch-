"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllChordsFromFretboard = exports.getAllChordsFromNotes = void 0;
const music_1 = require("./music");
const fretboard_1 = require("./fretboard");
exports.getAllChordsFromNotes = (playedNotesList, noteInBass = null) => {
    if (playedNotesList.length === 0)
        return [];
    const playedNotes = playedNotesList.map((note) => typeof note === 'string' ? music_1.createNoteFromName(note) : note);
    let bassNote = (typeof noteInBass === 'string') ? music_1.createNoteFromName(noteInBass) : noteInBass;
    if (bassNote === null) {
        playedNotes.forEach((note) => {
            if (bassNote === null || note.compare(bassNote) === -1)
                bassNote = note;
        });
    }
    const potentialChords = [];
    playedNotes.forEach((potentialRoot) => {
        const allIntervals = new Set(playedNotes
            .filter((note) => !note.equals(potentialRoot))
            .map((note) => potentialRoot.getInterval(note)));
        if (bassNote === null)
            throw new Error('Error: bass note cannot be determined.');
        potentialChords.push(new music_1.Chord(potentialRoot, bassNote, allIntervals));
    });
    const probabilityCuttofs = [3.8, 2.8, 1.8, 0.8, 0.2];
    let filterConditionCutoff = null;
    const maxProbability = Math.max(...potentialChords.map((chord) => chord.prob));
    for (const cutoff of probabilityCuttofs) {
        if (maxProbability >= cutoff) {
            filterConditionCutoff = cutoff;
            break;
        }
    }
    const sortChordsByProbAsc = (first, second) => {
        if (first.prob > second.prob)
            return -1;
        if (first.prob < second.prob)
            return 1;
        return 0;
    };
    return potentialChords
        .filter((chord) => chord.prob >= (filterConditionCutoff ?? 0))
        .sort(sortChordsByProbAsc)
        .map((chord) => chord.toString())
        .filter((name, index, chordNameList) => chordNameList.indexOf(name) === index);
};
exports.getAllChordsFromFretboard = (tuning, pressedFrets, tuningOffset = 0) => {
    const openStringNotes = fretboard_1.guitarTunings().get(tuning);
    if (openStringNotes === undefined)
        throw new Error('Error: invalid tuning provided.');
    const playedNotes = [];
    let bassNote = null;
    pressedFrets.forEach((fretNumber, index) => {
        if (fretNumber === false)
            return;
        const currentNote = fretboard_1.getNoteFromFret(openStringNotes[index], fretNumber, tuningOffset);
        if (bassNote === null || currentNote.compare(bassNote) === -1)
            bassNote = currentNote;
        playedNotes.push(currentNote);
    });
    return exports.getAllChordsFromNotes(playedNotes, bassNote);
};
